From c8e968f421cd9bf1637b65ce8cf4d870dd0ec37a Mon Sep 17 00:00:00 2001
From: Gabriel Huau <gabriel.huau@innopeaktech.com>
Date: Fri, 10 Dec 2021 09:18:42 -0800
Subject: [PATCH] [WIP] Allow temporary reading root buffer memory for testing

Adding mpm88_aot from Xiaohan for testing as well
---
 .../taichi/examples/simulation/mpm88_aot.py   | 105 ++++++++++++++++++
 taichi/backends/vulkan/runtime.cpp            |  14 ++-
 taichi/backends/vulkan/runtime.h              |   2 +
 3 files changed, 117 insertions(+), 4 deletions(-)
 create mode 100644 python/taichi/examples/simulation/mpm88_aot.py

diff --git a/python/taichi/examples/simulation/mpm88_aot.py b/python/taichi/examples/simulation/mpm88_aot.py
new file mode 100644
index 000000000..73ff56e31
--- /dev/null
+++ b/python/taichi/examples/simulation/mpm88_aot.py
@@ -0,0 +1,105 @@
+# MPM-MLS in 88 lines of Taichi code, originally created by @yuanming-hu
+import taichi as ti
+
+ti.init(arch=ti.vulkan)
+
+n_particles = 8192
+n_grid = 128
+dx = 1 / n_grid
+dt = 2e-4
+
+p_rho = 1
+p_vol = (dx * 0.5)**2
+p_mass = p_vol * p_rho
+gravity = 9.8
+bound = 3
+E = 400
+
+x = ti.Vector.field(2, float, n_particles)
+v = ti.Vector.field(2, float, n_particles)
+C = ti.Matrix.field(2, 2, float, n_particles)
+J = ti.field(float, n_particles)
+
+grid_v = ti.Vector.field(2, float, (n_grid, n_grid))
+grid_m = ti.field(float, (n_grid, n_grid))
+
+
+@ti.kernel
+def substep():
+    for i, j in grid_m:
+        grid_v[i, j] = [0, 0]
+        grid_m[i, j] = 0
+    for p in x:
+        Xp = x[p] / dx
+        base = int(Xp - 0.5)
+        fx = Xp - base
+        w = [0.5 * (1.5 - fx)**2, 0.75 - (fx - 1)**2, 0.5 * (fx - 0.5)**2]
+        stress = -dt * 4 * E * p_vol * (J[p] - 1) / dx**2
+        affine = ti.Matrix([[stress, 0], [0, stress]]) + p_mass * C[p]
+        for i, j in ti.static(ti.ndrange(3, 3)):
+            offset = ti.Vector([i, j])
+            dpos = (offset - fx) * dx
+            weight = w[i].x * w[j].y
+            grid_v[base + offset] += weight * (p_mass * v[p] + affine @ dpos)
+            grid_m[base + offset] += weight * p_mass
+    for i, j in grid_m:
+        if grid_m[i, j] > 0:
+            grid_v[i, j] /= grid_m[i, j]
+        grid_v[i, j].y -= dt * gravity
+        if i < bound and grid_v[i, j].x < 0:
+            grid_v[i, j].x = 0
+        if i > n_grid - bound and grid_v[i, j].x > 0:
+            grid_v[i, j].x = 0
+        if j < bound and grid_v[i, j].y < 0:
+            grid_v[i, j].y = 0
+        if j > n_grid - bound and grid_v[i, j].y > 0:
+            grid_v[i, j].y = 0
+    for p in x:
+        Xp = x[p] / dx
+        base = int(Xp - 0.5)
+        fx = Xp - base
+        w = [0.5 * (1.5 - fx)**2, 0.75 - (fx - 1)**2, 0.5 * (fx - 0.5)**2]
+        new_v = ti.Vector.zero(float, 2)
+        new_C = ti.Matrix.zero(float, 2, 2)
+        for i, j in ti.static(ti.ndrange(3, 3)):
+            offset = ti.Vector([i, j])
+            dpos = (offset - fx) * dx
+            weight = w[i].x * w[j].y
+            g_v = grid_v[base + offset]
+            new_v += weight * g_v
+            new_C += 4 * weight * g_v.outer_product(dpos) / dx**2
+        v[p] = new_v
+        x[p] += dt * v[p]
+        J[p] *= 1 + dt * new_C.trace()
+        C[p] = new_C
+
+
+@ti.kernel
+def init():
+    for i in range(n_particles):
+        x[i] = [ti.random() * 0.4 + 0.2, ti.random() * 0.4 + 0.2]
+        v[i] = [0, -1]
+        J[i] = 1
+
+
+# init()
+# gui = ti.GUI('MPM88')
+# while gui.running and not gui.get_event(gui.ESCAPE):
+#     for s in range(50):
+#         substep()
+#     gui.clear(0x112F41)
+#     gui.circles(x.to_numpy(), radius=1.5, color=0x068587)
+#     gui.show()
+
+
+
+m = ti.aot.Module(ti.vulkan)
+m.add_field('x', x)
+m.add_field('v', v)
+m.add_field('C', C)
+m.add_field('J', J)
+m.add_field('grid_v', grid_v)
+m.add_field('grid_m', grid_m)
+m.add_kernel(init)
+m.add_kernel(substep)
+m.save('./mpm88/', 'mpm88')
diff --git a/taichi/backends/vulkan/runtime.cpp b/taichi/backends/vulkan/runtime.cpp
index 5547c7b93..65afabd69 100644
--- a/taichi/backends/vulkan/runtime.cpp
+++ b/taichi/backends/vulkan/runtime.cpp
@@ -473,10 +473,10 @@ void VkRuntime::add_root_buffer(size_t root_buffer_size) {
     root_buffer_size = 4;  // there might be empty roots
   }
   std::unique_ptr<DeviceAllocationGuard> new_buffer =
-      device_->allocate_memory_unique(
-          {root_buffer_size,
-           /*host_write=*/false, /*host_read=*/false,
-           /*export_sharing=*/false, AllocUsage::Storage});
+      device_->allocate_memory_unique({root_buffer_size,
+                                       /*host_write=*/true, /*host_read=*/true,
+                                       /*export_sharing=*/false,
+                                       AllocUsage::Storage});
   Stream *stream = device_->get_compute_stream();
   auto cmdlist = stream->new_command_list();
   cmdlist->buffer_fill(new_buffer->get_ptr(0), root_buffer_size, /*data=*/0);
@@ -508,6 +508,12 @@ VkRuntime::RegisterParams run_codegen(
   return std::move(res);
 }
 
+void VkRuntime::read_memory(uint8_t *ptr, uintptr_t offset, size_t size) const {
+  uint8_t *buffer = (uint8_t *)device_->map(*(root_buffers_[0]));
+  memcpy(ptr, buffer + offset, size);
+  device_->unmap(*(root_buffers_[0]));
+}
+
 }  // namespace vulkan
 }  // namespace lang
 }  // namespace taichi
diff --git a/taichi/backends/vulkan/runtime.h b/taichi/backends/vulkan/runtime.h
index 9cd8128be..0fc24279c 100644
--- a/taichi/backends/vulkan/runtime.h
+++ b/taichi/backends/vulkan/runtime.h
@@ -105,6 +105,8 @@ class VkRuntime {
 
   void add_root_buffer(size_t root_buffer_size);
 
+  void read_memory(uint8_t *ptr, uintptr_t offset, size_t size) const;
+
  private:
   void init_buffers();
 
-- 
2.25.1

