diff --git a/taichi/ui/backends/vulkan/renderables/set_image.cpp b/taichi/ui/backends/vulkan/renderables/set_image.cpp
index 316297849..f062af7a2 100644
--- a/taichi/ui/backends/vulkan/renderables/set_image.cpp
+++ b/taichi/ui/backends/vulkan/renderables/set_image.cpp
@@ -29,7 +29,9 @@ void SetImage::update_ubo(float x_factor, float y_factor) {
 
 void SetImage::update_data(const SetImageInfo &info) {
   Program *prog = app_context_->prog();
-  prog->synchronize();
+  if (prog) {
+      prog->synchronize();
+  }
 
   const FieldInfo &img = info.img;
 
@@ -49,9 +51,15 @@ void SetImage::update_data(const SetImageInfo &info) {
   app_context_->device().image_transition(texture_, ImageLayout::shader_read,
                                           ImageLayout::transfer_dst);
 
-  DevicePtr img_dev_ptr = get_device_ptr(prog, img.snode);
-  uint64_t img_size = pixels * 4;
+  // If there is no current program, VBO information should be provided directly
+  // instead of accessing through the current SNode
+
+  DevicePtr img_dev_ptr = info.img.dev_alloc.get_ptr();
+  if(prog) {
+    img_dev_ptr = get_device_ptr(prog, img.snode);
+  }
 
+  uint64_t img_size = pixels * 16;
   Device::MemcpyCapability memcpy_cap = Device::check_memcpy_capability(
       gpu_staging_buffer_.get_ptr(), img_dev_ptr, img_size);
   if (memcpy_cap == Device::MemcpyCapability::Direct) {
@@ -112,11 +120,11 @@ void SetImage::init_set_image(AppContext *app_context,
 }
 
 void SetImage::create_texture() {
-  size_t image_size = width * height * 4;
+  size_t image_size = width * height * 16;
 
   ImageParams params;
   params.dimension = ImageDimension::d2D;
-  params.format = BufferFormat::rgba8;
+  params.format = BufferFormat::rgba32f;
   params.initial_layout = ImageLayout::shader_read;
   // these are flipped because taichi is y-major and vulkan is x-major
   params.x = height;
